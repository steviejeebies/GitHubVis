// HISTOGRAM - FROM https://www.d3-graph-gallery.com/graph/histogram_basic.html

 // set the dimensions and margins of the graph
 var margin = {top: 10, right: 30, bottom: 30, left: 40},
     hist_width = 460 - margin.left - margin.right,
     hist_height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var hist_svg = d3v4.select("#histogram_div")
   .append("svg")
     .attr("width", hist_width + margin.left + margin.right)
     .attr("height", hist_height + margin.top + margin.bottom)
   .append("g")
     .attr("transform",
           "translate(" + margin.left + "," + margin.top + ")");

    var data = [{price:10}, {price:10}, {price:20}, {price:20}, {price:20}, {price:30}, {price:23}, {price:40}, {price:40}, {price:40}]

 d3v4.json("/userdata/torvalds", function (error,data) {
    console.log("Hello!")
    console.log(data)
    console.log(error)
    console.log("Hello!")
 });

 // get the data
//  d3v4.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv", function(data) {
//      console.log(data)
   // X axis: scale and draw:
   var x = d3v4.scaleLinear()
       .domain([0, d3v4.max(data, function(d) { return (+d.price)+10 })])     // can use this instead of 1000 to have the max of data: )
       .range([0, hist_width]);
   hist_svg.append("g")
       .attr("transform", "translate(0," + hist_height + ")")
       .call(d3v4.axisBottom(x));

//   // set the parameters for the histogram
   var histogram = d3v4.histogram()
       .value(function(d) { return d.price; })   // I need to give the vector of value
       .domain(x.domain())  // then the domain of the graphic
       .thresholds(x.ticks(70)); // then the numbers of bins

   // And apply this function to data to get the bins
   var bins = histogram(data);

   // Y axis: scale and draw:
   var y = d3v4.scaleLinear()
       .range([hist_height, 0]);
       y.domain([0, d3v4.max(bins, function(d) { return d.length; })]);   // d3v4.hist has to be called before the Y axis obviously
   hist_svg.append("g")
       .call(d3v4.axisLeft(y));

//   // append the bar rectangles to the hist_svg element
   hist_svg.selectAll("rect")
       .data(bins)
       .enter()
       .append("rect")
         .attr("x", 1)
         .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
         .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
         .attr("height", function(d) { return hist_height - y(d.length); })
         .style("fill", "#69b3a2")

// });

// PIE CHART - FROM http://bl.ocks.org/dbuezas/9306799

var svgPie = d3v3.select("#piechart")
	.append("svg")
	.append("g")

svgPie.append("g")
	.attr("class", "slices");
svgPie.append("g")
	.attr("class", "labels");
svgPie.append("g")
	.attr("class", "lines");

var pie_width = 960,
    pie_height = 450,
	pie_radius = Math.min(pie_width, pie_height) / 2;

var pie = d3v3.layout.pie()
	.sort(null)
	.value(function(d) {
		return d.value;
	});

var arc = d3v3.svg.arc()
	.outerRadius(pie_radius * 0.8)
	.innerRadius(pie_radius * 0.4);

var outerArc = d3v3.svg.arc()
	.innerRadius(pie_radius * 0.9)
	.outerRadius(pie_radius * 0.9);

svgPie.attr("transform", "translate(" + pie_width / 2 + "," + pie_height / 2 + ")");

var key = function(d){ return d.data.label; };

var color = d3v3.scale.ordinal()
	.domain(["Lorem ipsum", "dolor sit", "amet", "consectetur", "adipisicing", "elit", "sed", "do", "eiusmod", "tempor", "incididunt"])
	.range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

function randomData (){
	var labels = color.domain();
	return labels.map(function(label){
		return { label: label, value: Math.random() }
	});
}

change(randomData());

d3v3.select(".randomize")
	.on("click", function(){
		change(randomData());
	});


function change(data) {

	/* //////- PIE SLICES //////-*/
	var slice = svgPie.select(".slices").selectAll("path.slice")
		.data(pie(data), key);

	slice.enter()
		.insert("path")
		.style("fill", function(d) { return color(d.data.label); })
		.attr("class", "slice");

	slice		
		.transition().duration(1000)
		.attrTween("d", function(d) {
			this._current = this._current || d;
			var interpolate = d3v3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				return arc(interpolate(t));
			};
		})

	slice.exit()
		.remove();

	/* //////- TEXT LABELS //////-*/

	var text = svgPie.select(".labels").selectAll("text")
		.data(pie(data), key);

	text.enter()
		.append("text")
		.attr("dy", ".35em")
		.text(function(d) {
			return d.data.label;
		});
	
	function midAngle(d){
		return d.startAngle + (d.endAngle - d.startAngle)/2;
	}

	text.transition().duration(1000)
		.attrTween("transform", function(d) {
			this._current = this._current || d;
			var interpolate = d3v3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				var pos = outerArc.centroid(d2);
				pos[0] = pie_radius * (midAngle(d2) < Math.PI ? 1 : -1);
				return "translate("+ pos +")";
			};
		})
		.styleTween("text-anchor", function(d){
			this._current = this._current || d;
			var interpolate = d3v3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				return midAngle(d2) < Math.PI ? "start":"end";
			};
		});

	text.exit()
		.remove();

	/* //////- SLICE TO TEXT POLYLINES //////-*/

	var polyline = svgPie.select(".lines").selectAll("polyline")
		.data(pie(data), key);
	
	polyline.enter()
		.append("polyline");

	polyline.transition().duration(1000)
		.attrTween("points", function(d){
			this._current = this._current || d;
			var interpolate = d3v3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				var pos = outerArc.centroid(d2);
				pos[0] = pie_radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
				return [arc.centroid(d2), outerArc.centroid(d2), pos];
			};			
		});
	
	polyline.exit()
		.remove();
};

// BAR CHART
// set the dimensions and margins of the graph
var barchart_margin = {top: 30, right: 30, bottom: 70, left: 60},
    barchart_width = 460 - barchart_margin.left - barchart_margin.right,
    barchart_height = 400 - barchart_margin.top - barchart_margin.bottom;

// append the svg object to the body of the page
var barchart_svg = d3v4.select("#barchart_div")
  .append("svg")
    .attr("width", barchart_width + barchart_margin.left + barchart_margin.right)
    .attr("height", barchart_height + barchart_margin.top + barchart_margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + barchart_margin.left + "," + barchart_margin.top + ")");

// Parse the Data
d3v4.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum_header.csv", function(data) {

  // sort data
  data.sort(function(b, a) {
    return a.Value - b.Value;
  });

  // X axis
  var x = d3v4.scaleBand()
    .range([ 0, barchart_width ])
    .domain(data.map(function(d) { return d.Country; }))
    .padding(0.2);
  barchart_svg.append("g")
    .attr("transform", "translate(0," + barchart_height + ")")
    .call(d3v4.axisBottom(x))
    .selectAll("text")
      .attr("transform", "translate(-10,0)rotate(-45)")
      .style("text-anchor", "end");

  // Add Y axis
  var y = d3v4.scaleLinear()
    .domain([0, 13000])
    .range([ barchart_height, 0]);
  barchart_svg.append("g")
    .call(d3v4.axisLeft(y));

  // Bars
  barchart_svg.selectAll("mybar")
    .data(data)
    .enter()
    .append("rect")
      .attr("x", function(d) { return x(d.Country); })
      .attr("y", function(d) { return y(d.Value); })
      .attr("width", x.bandwidth())
      .attr("height", function(d) { return barchart_height - y(d.Value); })
      .attr("fill", "#69b3a2")

})